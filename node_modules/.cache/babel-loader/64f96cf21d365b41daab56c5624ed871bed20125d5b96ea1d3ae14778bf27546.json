{"ast":null,"code":"const initialState = {\n  user: null\n};\n\n// Reducer: guarda o estado que desejamos compartilhar na aplicação e manipula/altera o estado\n\n//Todo Reducer precisa retornar o nosso estado atualizado\nexport function userReducer(state = initialState, action) {\n  if (action.type === \"user/login\") {\n    return {\n      ...state,\n      user: action.payload\n    };\n  } else if (action.type === \"user/logout\") {\n    return {\n      ...state,\n      user: null\n    };\n  }\n  return state;\n}","map":{"version":3,"names":["initialState","user","userReducer","state","action","type","payload"],"sources":["/home/luiz/Documentos/projects/myshop/src/redux/UserReducer/reducer.ts"],"sourcesContent":["interface User {\n  name: string;\n  email: string;\n}\n\ninterface UserState {\n  user: User | null;\n}\n\nconst initialState: UserState = {\n  user: null,\n};\n\n// Reducer: guarda o estado que desejamos compartilhar na aplicação e manipula/altera o estado\n\ninterface UserAction {\n  type: string;\n  payload?: User;\n}\n//Todo Reducer precisa retornar o nosso estado atualizado\nexport function userReducer(\n  state = initialState,\n  action: UserAction\n): UserState {\n  if (action.type === \"user/login\") {\n    return {\n        ...state,\n      user: action.payload as User,\n    };\n  } else if (action.type === \"user/logout\") {\n  return {\n    ...state,\n    user:null,\n  };\n}\n  return state;\n}\n"],"mappings":"AASA,MAAMA,YAAuB,GAAG;EAC9BC,IAAI,EAAE;AACR,CAAC;;AAED;;AAMA;AACA,OAAO,SAASC,WAAWA,CACzBC,KAAK,GAAGH,YAAY,EACpBI,MAAkB,EACP;EACX,IAAIA,MAAM,CAACC,IAAI,KAAK,YAAY,EAAE;IAChC,OAAO;MACH,GAAGF,KAAK;MACVF,IAAI,EAAEG,MAAM,CAACE;IACf,CAAC;EACH,CAAC,MAAM,IAAIF,MAAM,CAACC,IAAI,KAAK,aAAa,EAAE;IAC1C,OAAO;MACL,GAAGF,KAAK;MACRF,IAAI,EAAC;IACP,CAAC;EACH;EACE,OAAOE,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}